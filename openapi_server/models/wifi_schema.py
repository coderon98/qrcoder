# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class WifiSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network=None, password=None, hidden_network=None, cryptage=None, frame=None, shape=None, logo=None):  # noqa: E501
        """WifiSchema - a model defined in OpenAPI

        :param network: The network of this WifiSchema.  # noqa: E501
        :type network: str
        :param password: The password of this WifiSchema.  # noqa: E501
        :type password: str
        :param hidden_network: The hidden_network of this WifiSchema.  # noqa: E501
        :type hidden_network: bool
        :param cryptage: The cryptage of this WifiSchema.  # noqa: E501
        :type cryptage: str
        :param frame: The frame of this WifiSchema.  # noqa: E501
        :type frame: str
        :param shape: The shape of this WifiSchema.  # noqa: E501
        :type shape: str
        :param logo: The logo of this WifiSchema.  # noqa: E501
        :type logo: str
        """
        self.openapi_types = {
            'network': str,
            'password': str,
            'hidden_network': bool,
            'cryptage': str,
            'frame': str,
            'shape': str,
            'logo': str
        }

        self.attribute_map = {
            'network': 'network',
            'password': 'password',
            'hidden_network': 'hiddenNetwork',
            'cryptage': 'cryptage',
            'frame': 'frame',
            'shape': 'shape',
            'logo': 'logo'
        }

        self._network = network
        self._password = password
        self._hidden_network = hidden_network
        self._cryptage = cryptage
        self._frame = frame
        self._shape = shape
        self._logo = logo

    @classmethod
    def from_dict(cls, dikt) -> 'WifiSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The wifiSchema of this WifiSchema.  # noqa: E501
        :rtype: WifiSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this WifiSchema.


        :return: The network of this WifiSchema.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WifiSchema.


        :param network: The network of this WifiSchema.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def password(self):
        """Gets the password of this WifiSchema.


        :return: The password of this WifiSchema.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WifiSchema.


        :param password: The password of this WifiSchema.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def hidden_network(self):
        """Gets the hidden_network of this WifiSchema.


        :return: The hidden_network of this WifiSchema.
        :rtype: bool
        """
        return self._hidden_network

    @hidden_network.setter
    def hidden_network(self, hidden_network):
        """Sets the hidden_network of this WifiSchema.


        :param hidden_network: The hidden_network of this WifiSchema.
        :type hidden_network: bool
        """

        self._hidden_network = hidden_network

    @property
    def cryptage(self):
        """Gets the cryptage of this WifiSchema.


        :return: The cryptage of this WifiSchema.
        :rtype: str
        """
        return self._cryptage

    @cryptage.setter
    def cryptage(self, cryptage):
        """Sets the cryptage of this WifiSchema.


        :param cryptage: The cryptage of this WifiSchema.
        :type cryptage: str
        """
        if cryptage is None:
            raise ValueError("Invalid value for `cryptage`, must not be `None`")  # noqa: E501

        self._cryptage = cryptage

    @property
    def frame(self):
        """Gets the frame of this WifiSchema.


        :return: The frame of this WifiSchema.
        :rtype: str
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this WifiSchema.


        :param frame: The frame of this WifiSchema.
        :type frame: str
        """

        self._frame = frame

    @property
    def shape(self):
        """Gets the shape of this WifiSchema.


        :return: The shape of this WifiSchema.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this WifiSchema.


        :param shape: The shape of this WifiSchema.
        :type shape: str
        """

        self._shape = shape

    @property
    def logo(self):
        """Gets the logo of this WifiSchema.


        :return: The logo of this WifiSchema.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this WifiSchema.


        :param logo: The logo of this WifiSchema.
        :type logo: str
        """

        self._logo = logo
